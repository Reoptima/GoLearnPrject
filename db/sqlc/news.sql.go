// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: news.sql

package db

import (
	"context"
)

const createNews = `-- name: CreateNews :one
INSERT INTO news (
                  text
) VALUES (
          $1
         ) RETURNING id, text, created_at
`

func (q *Queries) CreateNews(ctx context.Context, text string) (News, error) {
	row := q.db.QueryRowContext(ctx, createNews, text)
	var i News
	err := row.Scan(&i.ID, &i.Text, &i.CreatedAt)
	return i, err
}

const deleteNews = `-- name: DeleteNews :exec
DELETE FROM news
where id = $1
`

func (q *Queries) DeleteNews(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNews, id)
	return err
}

const getNews = `-- name: GetNews :one
SELECT id, text, created_at FROM news
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetNews(ctx context.Context, id int64) (News, error) {
	row := q.db.QueryRowContext(ctx, getNews, id)
	var i News
	err := row.Scan(&i.ID, &i.Text, &i.CreatedAt)
	return i, err
}

const listNews = `-- name: ListNews :many
SELECT id, text, created_at FROM news
limit $1
    offset $2
`

type ListNewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListNews(ctx context.Context, arg ListNewsParams) ([]News, error) {
	rows, err := q.db.QueryContext(ctx, listNews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []News{}
	for rows.Next() {
		var i News
		if err := rows.Scan(&i.ID, &i.Text, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
